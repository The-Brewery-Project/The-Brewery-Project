[
  {
    "objectID": "models_implemented.html",
    "href": "models_implemented.html",
    "title": "Models Implemented",
    "section": "",
    "text": "Tab for Models Implemented!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Meet the Team",
    "section": "",
    "text": "Meet the team behind The Brewery Project!\n\nJessica Groven\n\n\nJulia Gallwitz\n\n\nCarl Klein"
  },
  {
    "objectID": "exploratory/open-brewery-db-exploration.html",
    "href": "exploratory/open-brewery-db-exploration.html",
    "title": "Open-Brewery-DB Exploration",
    "section": "",
    "text": "The goal of this is to scrape the brewery data avaiable for breweries in the US from the open project and database API found at Open Brewery DB."
  },
  {
    "objectID": "exploratory/open-brewery-db-exploration.html#scraping-the-data",
    "href": "exploratory/open-brewery-db-exploration.html#scraping-the-data",
    "title": "Open-Brewery-DB Exploration",
    "section": "Scraping the Data",
    "text": "Scraping the Data\n\n\nCode\n# import libraries\nimport requests\nimport json\nimport numpy as np\nimport pandas as pd\n\n\n\n\nCode\n# pull data with while loop (extracts all database data)\ndata_bool = True\npage = 1\nwhile data_bool == True:\n    url = f'https://api.openbrewerydb.org/v1/breweries?page={page}&per_page=200'\n    response = requests.get(url)\n    data = response.json()\n    if len(data) == 0:\n        data_bool = False\n        break\n    if page == 1:\n        data_df = pd.DataFrame(data)\n    else:\n        data_df = pd.concat([data_df, pd.DataFrame(data)])\n    page += 1\n\n# reset index\ndata_df.reset_index(inplace = True, drop = True)\n\n\n\n\nCode\n# before\ndata_df.head(10)\n\n\n\n\n\n\n\n\n\nid\nname\nbrewery_type\naddress_1\naddress_2\naddress_3\ncity\nstate_province\npostal_code\ncountry\nlongitude\nlatitude\nphone\nwebsite_url\nstate\nstreet\n\n\n\n\n0\n5128df48-79fc-4f0f-8b52-d06be54d0cec\n(405) Brewing Co\nmicro\n1716 Topeka St\nNone\nNone\nNorman\nOklahoma\n73069-8224\nUnited States\n-97.46818222\n35.25738891\n4058160490\nhttp://www.405brewing.com\nOklahoma\n1716 Topeka St\n\n\n1\n9c5a66c8-cc13-416f-a5d9-0a769c87d318\n(512) Brewing Co\nmicro\n407 Radam Ln Ste F200\nNone\nNone\nAustin\nTexas\n78745-1197\nUnited States\nNone\nNone\n5129211545\nhttp://www.512brewing.com\nTexas\n407 Radam Ln Ste F200\n\n\n2\n34e8c68b-6146-453f-a4b9-1f6cd99a5ada\n1 of Us Brewing Company\nmicro\n8100 Washington Ave\nNone\nNone\nMount Pleasant\nWisconsin\n53406-3920\nUnited States\n-87.88336350209435\n42.72010826899558\n2624847553\nhttps://www.1ofusbrewing.com\nWisconsin\n8100 Washington Ave\n\n\n3\nef970757-fe42-416f-931d-722451f1f59c\n10 Barrel Brewing Co\nlarge\n1501 E St\nNone\nNone\nSan Diego\nCalifornia\n92101-6618\nUnited States\n-117.129593\n32.714813\n6195782311\nhttp://10barrel.com\nCalifornia\n1501 E St\n\n\n4\n6d14b220-8926-4521-8d19-b98a2d6ec3db\n10 Barrel Brewing Co\nlarge\n62970 18th St\nNone\nNone\nBend\nOregon\n97701-9847\nUnited States\n-121.281706\n44.08683531\n5415851007\nhttp://www.10barrel.com\nOregon\n62970 18th St\n\n\n5\ne2e78bd8-80ff-4a61-a65c-3bfbd9d76ce2\n10 Barrel Brewing Co\nlarge\n1135 NW Galveston Ave Ste B\nNone\nNone\nBend\nOregon\n97703-2465\nUnited States\n-121.3288021\n44.0575649\n5415851007\nNone\nOregon\n1135 NW Galveston Ave Ste B\n\n\n6\ne432899b-7f58-455f-9c7b-9a6e2130a1e0\n10 Barrel Brewing Co\nlarge\n1411 NW Flanders St\nNone\nNone\nPortland\nOregon\n97209-2620\nUnited States\n-122.6855056\n45.5259786\n5032241700\nhttp://www.10barrel.com\nOregon\n1411 NW Flanders St\n\n\n7\n9f1852da-c312-42da-9a31-097bac81c4c0\n10 Barrel Brewing Co - Bend Pub\nlarge\n62950 NE 18th St\nNone\nNone\nBend\nOregon\n97701\nUnited States\n-121.2809536\n44.0912109\n5415851007\nNone\nOregon\n62950 NE 18th St\n\n\n8\nea4f30c0-bce6-416b-8904-fab4055a7362\n10 Barrel Brewing Co - Boise\nlarge\n826 W Bannock St\nNone\nNone\nBoise\nIdaho\n83702-5857\nUnited States\n-116.202929\n43.618516\n2083445870\nhttp://www.10barrel.com\nIdaho\n826 W Bannock St\n\n\n9\n1988eb86-f0a2-4674-ba04-02454efa0d31\n10 Barrel Brewing Co - Denver\nlarge\n2620 Walnut St\nNone\nNone\nDenver\nColorado\n80205-2231\nUnited States\n-104.9853655\n39.7592508\n7205738992\nNone\nColorado\n2620 Walnut St"
  },
  {
    "objectID": "exploratory/open-brewery-db-exploration.html#cleaning-the-data",
    "href": "exploratory/open-brewery-db-exploration.html#cleaning-the-data",
    "title": "Open-Brewery-DB Exploration",
    "section": "Cleaning the Data",
    "text": "Cleaning the Data\n\n\nCode\n# lambda function to make lower case, remove trailing or leading spaces\nlower_strip = lambda text: text.lower().strip() if text is not None else None\n\n\n\n\nCode\n# how much data will we be removing by sticking to just the US, and what type of cleaning is required?\ndata_df['country'].value_counts()\n\n\nUnited States     7972\nIreland             70\nEngland             62\nSouth Korea         61\nPoland              34\nPortugal            14\nAustria             14\nScotland            10\nSweden               6\nFrance               3\nIsle of Man          2\n United States       1\nName: country, dtype: int64\n\n\n\n\nCode\n# clean country column and filter for \"united states\"\ndata_df['country'] = data_df['country'].apply(func=lower_strip)\ndata_us = data_df[data_df['country'] == 'united states']\n\n\n\n\nCode\ndata_us['country'].value_counts()\n\n\nunited states    7973\nName: country, dtype: int64\n\n\n\n\nCode\n# now that we have just the US, let's see what type of null value data is remaining\ndata_us.isnull().sum()\n\n\nid                   0\nname                 0\nbrewery_type         0\naddress_1          768\naddress_2         7968\naddress_3         7973\ncity                 0\nstate_province       0\npostal_code          0\ncountry              0\nlongitude         2326\nlatitude          2326\nphone              790\nwebsite_url       1132\nstate                0\nstreet             768\ndtype: int64\n\n\n\n\nCode\n# is street equivalent to address_1?\ndata_us[data_us['address_1'] != data_us['street']]\n\n\n\n\n\n\n\n\n\nid\nname\nbrewery_type\ncity\npostal_code\ncountry\nlongitude\nlatitude\nphone\nwebsite_url\nstate\nstreet\n\n\n\n\n\n\n\n\n\n\n\nCode\n# is state equivalent to state_province?\ndata_us[data_us['state_province'] != data_us['state']]\n\n\nWith this amount of data and for the purposes of our project, we could probably remove the rows which don’t contain a tier-1 address.\nMost tier-2 and tier-3 addresses are missing, so let’s just remove those columns.\nAdditionally, street is an identical column to address_1 as is state to state_province. We can remove the duplicate columns.\n\n\nCode\n# drop all locations without addy 1, and remove addy 2 and addy 3 columns\ndata_us.dropna(subset = ['address_1'], axis = 0, inplace = True)\ndata_us.drop(['address_2', 'address_3'], axis = 1, inplace = True)\n\n# remove address_1 and state_province columns (these are equivalents of street and state)\ndata_us.drop(['address_1', 'state_province'], axis = 1, inplace = True)\n\n\nC:\\Users\\carlj\\AppData\\Local\\Temp\\ipykernel_20660\\792256491.py:2: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  data_us.dropna(subset = ['address_1'], axis = 0, inplace = True)\nC:\\Users\\carlj\\AppData\\Local\\Temp\\ipykernel_20660\\792256491.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  data_us.drop(['address_2', 'address_3'], axis = 1, inplace = True)\nC:\\Users\\carlj\\AppData\\Local\\Temp\\ipykernel_20660\\792256491.py:6: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  data_us.drop(['address_1', 'state_province'], axis = 1, inplace = True)\n\n\nWe should apply our cleaning function to the rest of the applicable text-based columns.\n\n\nCode\n# clean name, brewery_type, city, state, street, and website_url columns\ndata_us['name'] = data_us['name'].apply(func=lower_strip)\ndata_us['brewery_type'] = data_us['brewery_type'].apply(func=lower_strip)\ndata_us['city'] = data_us['city'].apply(func=lower_strip)\ndata_us['state'] = data_us['state'].apply(func=lower_strip)\ndata_us['street'] = data_us['street'].apply(func=lower_strip)\ndata_us['website_url'] = data_us['website_url'].apply(func=lower_strip)\n\n\nC:\\Users\\carlj\\AppData\\Local\\Temp\\ipykernel_20660\\2023110785.py:2: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  data_us['name'] = data_us['name'].apply(func=lower_strip)\nC:\\Users\\carlj\\AppData\\Local\\Temp\\ipykernel_20660\\2023110785.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  data_us['brewery_type'] = data_us['brewery_type'].apply(func=lower_strip)\nC:\\Users\\carlj\\AppData\\Local\\Temp\\ipykernel_20660\\2023110785.py:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  data_us['city'] = data_us['city'].apply(func=lower_strip)\nC:\\Users\\carlj\\AppData\\Local\\Temp\\ipykernel_20660\\2023110785.py:5: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  data_us['state'] = data_us['state'].apply(func=lower_strip)\nC:\\Users\\carlj\\AppData\\Local\\Temp\\ipykernel_20660\\2023110785.py:6: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  data_us['street'] = data_us['street'].apply(func=lower_strip)\nC:\\Users\\carlj\\AppData\\Local\\Temp\\ipykernel_20660\\2023110785.py:7: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  data_us['website_url'] = data_us['website_url'].apply(func=lower_strip)\n\n\n\n\nCode\n# let's check nulls again\ndata_us.isnull().sum()\n\n\nid                 0\nname               0\nbrewery_type       0\ncity               0\npostal_code        0\ncountry            0\nlongitude       1683\nlatitude        1683\nphone            543\nwebsite_url      787\nstate              0\nstreet             0\ndtype: int64\n\n\nAt the very least, we have full addresses. It’s very likely that longitude/latitude, phone numbers, and websites won’t be relevant. We’ll keep these rows for now, and consider them copmlete enough.\n\n\nCode\n# after\ndata_us.head(10)\n\n\n\n\n\n\n\n\n\nid\nname\nbrewery_type\ncity\npostal_code\ncountry\nlongitude\nlatitude\nphone\nwebsite_url\nstate\nstreet\n\n\n\n\n0\n5128df48-79fc-4f0f-8b52-d06be54d0cec\n(405) brewing co\nmicro\nnorman\n73069-8224\nunited states\n-97.46818222\n35.25738891\n4058160490\nhttp://www.405brewing.com\noklahoma\n1716 topeka st\n\n\n1\n9c5a66c8-cc13-416f-a5d9-0a769c87d318\n(512) brewing co\nmicro\naustin\n78745-1197\nunited states\nNone\nNone\n5129211545\nhttp://www.512brewing.com\ntexas\n407 radam ln ste f200\n\n\n2\n34e8c68b-6146-453f-a4b9-1f6cd99a5ada\n1 of us brewing company\nmicro\nmount pleasant\n53406-3920\nunited states\n-87.88336350209435\n42.72010826899558\n2624847553\nhttps://www.1ofusbrewing.com\nwisconsin\n8100 washington ave\n\n\n3\nef970757-fe42-416f-931d-722451f1f59c\n10 barrel brewing co\nlarge\nsan diego\n92101-6618\nunited states\n-117.129593\n32.714813\n6195782311\nhttp://10barrel.com\ncalifornia\n1501 e st\n\n\n4\n6d14b220-8926-4521-8d19-b98a2d6ec3db\n10 barrel brewing co\nlarge\nbend\n97701-9847\nunited states\n-121.281706\n44.08683531\n5415851007\nhttp://www.10barrel.com\noregon\n62970 18th st\n\n\n5\ne2e78bd8-80ff-4a61-a65c-3bfbd9d76ce2\n10 barrel brewing co\nlarge\nbend\n97703-2465\nunited states\n-121.3288021\n44.0575649\n5415851007\nNone\noregon\n1135 nw galveston ave ste b\n\n\n6\ne432899b-7f58-455f-9c7b-9a6e2130a1e0\n10 barrel brewing co\nlarge\nportland\n97209-2620\nunited states\n-122.6855056\n45.5259786\n5032241700\nhttp://www.10barrel.com\noregon\n1411 nw flanders st\n\n\n7\n9f1852da-c312-42da-9a31-097bac81c4c0\n10 barrel brewing co - bend pub\nlarge\nbend\n97701\nunited states\n-121.2809536\n44.0912109\n5415851007\nNone\noregon\n62950 ne 18th st\n\n\n8\nea4f30c0-bce6-416b-8904-fab4055a7362\n10 barrel brewing co - boise\nlarge\nboise\n83702-5857\nunited states\n-116.202929\n43.618516\n2083445870\nhttp://www.10barrel.com\nidaho\n826 w bannock st\n\n\n9\n1988eb86-f0a2-4674-ba04-02454efa0d31\n10 barrel brewing co - denver\nlarge\ndenver\n80205-2231\nunited states\n-104.9853655\n39.7592508\n7205738992\nNone\ncolorado\n2620 walnut st"
  },
  {
    "objectID": "exploratory/open-brewery-db-exploration.html#visualizing-the-data",
    "href": "exploratory/open-brewery-db-exploration.html#visualizing-the-data",
    "title": "Open-Brewery-DB Exploration",
    "section": "Visualizing the Data",
    "text": "Visualizing the Data\nFor future exploration, use data/open-brewery-db.csv pulled and cleaned by scripts/open-brewery-db-extractor.py.\n\n\nCode\n# import libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n\n\n\n\nCode\n# import dataframe if returning\ndf = pd.read_csv('../data/open-brewery-db.csv')\n\n\n\n\nCode\n# basic data statistics\ndf.info()\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 7205 entries, 0 to 7204\nData columns (total 12 columns):\n #   Column        Non-Null Count  Dtype  \n---  ------        --------------  -----  \n 0   id            7205 non-null   object \n 1   name          7205 non-null   object \n 2   brewery_type  7205 non-null   object \n 3   city          7205 non-null   object \n 4   postal_code   7205 non-null   object \n 5   country       7205 non-null   object \n 6   longitude     5522 non-null   float64\n 7   latitude      5522 non-null   float64\n 8   phone         6662 non-null   object \n 9   website_url   6418 non-null   object \n 10  state         7205 non-null   object \n 11  street        7205 non-null   object \ndtypes: float64(2), object(10)\nmemory usage: 675.6+ KB\n\n\n\n\nCode\n# further data statistics\n\n\n\n\nCode\n# breweries by state\n\n# top 5 breweries\n\n# lowest 5 breweries\n\n#"
  },
  {
    "objectID": "conclusion.html",
    "href": "conclusion.html",
    "title": "Conclusion",
    "section": "",
    "text": "Tab for Conclusions and Results!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "The Brewery Project",
    "section": "",
    "text": "Meet the Team\n\n\nIntroduction\n\n\nData Exploration\n\n\nModels Implemented\n\n\nConclusion"
  },
  {
    "objectID": "data_exploration.html",
    "href": "data_exploration.html",
    "title": "Data Exploration",
    "section": "",
    "text": "This page features our process for gathering, cleaning, and providing an initial exploratory analysis of the data used."
  },
  {
    "objectID": "data_exploration.html#data-cleaning",
    "href": "data_exploration.html#data-cleaning",
    "title": "Data Exploration",
    "section": "Data Cleaning",
    "text": "Data Cleaning\n\nInitial Dataset\n \n\n\nCleaning Process\nWe first reviewed the countries available, and found cleaning and slicing on the country name column were warranted.\n\nAfter applying a strip and lowercase on the country column, we filtered just for the United States, and then examined the null values.\nWith this amount of data and for the purposes of our project, we could probably remove the rows which don’t contain a tier-1 address.\nMost tier-2 and tier-3 addresses are missing, so let’s just remove those columns.\nAdditionally, street is an identical column to address_1 as is state to state_province. We can remove the duplicate columns.\nAfter removing nonessential rows and columns, we applied the strip and lowercase procedure on the remaining columns, and then reexamined the null values.\n\nWe decided to move forward with this data, and potentially massage any longitude/latitude data issues later. The phone and website_url columns will likely be irrelevant.\n\n\nCleaned Dataset"
  },
  {
    "objectID": "data_exploration.html#data-exploration",
    "href": "data_exploration.html#data-exploration",
    "title": "Data Exploration",
    "section": "Data Exploration",
    "text": "Data Exploration\nOur initial observation of the data is that we are dealing almost primarily with categorical values.\n\nA useful starting point in the visualizations would be to find the top-5 and bottom-5 for brewery counts by state, and then provide an overall heat map of the United States by brewery."
  },
  {
    "objectID": "exploratory/top-colleges-exploration.html",
    "href": "exploratory/top-colleges-exploration.html",
    "title": "Top Colleges Exploration",
    "section": "",
    "text": "The goal of this is to scrape the top 150 college towns according to the article The 150 Best College Towns in America (2021 Ranking).\nThe article provides a table giving Ranking, City (city, state), and Colleges associated with the city."
  },
  {
    "objectID": "exploratory/top-colleges-exploration.html#scraping-the-data",
    "href": "exploratory/top-colleges-exploration.html#scraping-the-data",
    "title": "Top Colleges Exploration",
    "section": "Scraping the Data",
    "text": "Scraping the Data\n\n\nCode\n# import libraries\nimport requests\nfrom bs4 import BeautifulSoup\nimport numpy as np\nimport pandas as pd\n\n\n\n\nCode\n# scraping information\nurl = 'https://listwithclever.com/research/best-college-towns-2021/'\nurl_headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'}\n# response of 403 without headers, 200 with\npage = requests.get(url, headers=url_headers)\nsoup = BeautifulSoup(page.text, 'lxml')\n\n\n\n\nCode\n# get table featuring the top 150\ncollege_table = soup.find('div', class_ = 'clever-table border-top border-bot col-1-center col-2-left col-3-left')\n\n\n\n\nCode\n# identify table rows\ncollege_rows = college_table.find_all('tr')\n\n\n\n\nCode\n# header has table header 'th' breaks\n# data rows have columnn 'td' breaks\n\n# header row\ncol_headers = [header.text for header in college_rows[0].find_all('th')]\n\n# data rows\ntop_colleges_dict = {'ranking': [], 'city': [], 'colleges': []}\nfor row in college_rows:\n    ranked_row = row.find_all('td')\n    if len(ranked_row) == 3:\n        top_colleges_dict['ranking'].append(ranked_row[0].text)\n        top_colleges_dict['city'].append(ranked_row[1].text)\n        top_colleges_dict['colleges'].append(ranked_row[2].text)\n\n\n\n\nCode\n# put data into pandas dataframe\ncolleges_df = pd.DataFrame(top_colleges_dict)\n\n\n\n\nCode\n# before\ncolleges_df.head(10)\n\n\n\n\n\n\n\n\n\nranking\ncity\ncolleges\n\n\n\n\n0\n1\nStanford, Calif.\nStanford University\n\n\n1\n2\nWilliamsburg, Va.\nWilliam & Mary\n\n\n2\n3\nPasadena, Calif.\nCalifornia Institute of Technology\n\n\n3\n4\nPrinceton, N.J.\nPrinceton University\n\n\n4\n5\nCharlottesville, Va.\nUniversity of Virginia\n\n\n5\n6\nAnn Arbor, Mich.\nUniversity of Michigan-Ann Arbor\n\n\n6\n7\nCambridge, Mass.\nHarvard University, Massachusetts Institute of...\n\n\n7\n8\nBerkeley, Calif.\nUniversity of California-Berkeley\n\n\n8\n9\nChampaign, Ill.\nUniversity of Illinois Urbana-Champaign\n\n\n9\n10\nGainesville, Fla.\nUniversity of Florida, Santa Fe College"
  },
  {
    "objectID": "exploratory/top-colleges-exploration.html#cleaning-the-data",
    "href": "exploratory/top-colleges-exploration.html#cleaning-the-data",
    "title": "Top Colleges Exploration",
    "section": "Cleaning the Data",
    "text": "Cleaning the Data\n\n\nCode\n# split city and state\ncolleges_df[['city', 'state']] = colleges_df['city'].str.split(', ', expand=True)\n\n# rearrange order\ncolleges_df = colleges_df[['city', 'state', 'colleges']]\n\n# lowercase city. state. and colleges\ncolleges_df['city'] = colleges_df['city'].str.lower()\ncolleges_df['state'] = colleges_df['state'].str.lower()\ncolleges_df['colleges'] = colleges_df['colleges'].str.lower()\n\n# unabbreviate state process\n# remove punctuation\ncolleges_df['state'] = colleges_df['state'].str.replace('.', '')\n\n\nC:\\Users\\carlj\\AppData\\Local\\Temp\\ipykernel_30764\\1185687717.py:14: FutureWarning: The default value of regex will change from True to False in a future version. In addition, single character regular expressions will *not* be treated as literal strings when regex=True.\n  colleges_df['state'] = colleges_df['state'].str.replace('.', '')\n\n\n\n\nCode\n# get a look at the values - number of unique states\ncolleges_df['state'].nunique()\n\n\n44\n\n\n\n\nCode\n# get a look at the values - states and state counts\ncolleges_df['state'].value_counts()\n\n\ncalif    15\nnc        9\nwis       8\nny        7\npa        7\ntexas     6\nmich      6\nva        6\nwash      5\ntenn      4\ncolo      4\nmo        4\nind       4\nill       4\nmiss      3\nwva       3\nohio      3\niowa      3\nnj        3\nmd        3\nmass      3\nariz      3\nla        3\nsc        3\nmont      2\nkan       2\nconn      2\nala       2\nky        2\nminn      2\nutah      2\nokla      2\nfla       2\nore       2\nga        2\nark       1\nwyo       1\nnm        1\ndel       1\nnev       1\nri        1\nmaine     1\nvt        1\nidaho     1\nName: state, dtype: int64\n\n\n\n\nCode\n# create a dictionary to turn \"abbreviated\" states to their respective full names\n# abbreviated states\nabbreviated = ['calif','va','nj','mich','mass','ill','fla','ind','wva','nc','pa',\n               'miss','texas','colo','ny','ga','ore','iowa','del','wis','md','okla',\n               'mo','utah','minn','ariz','la','sc','ky','wash','ark','ala','wyo',\n               'conn','kan','nm','tenn','ohio','mont','nev','ri','maine','vt','idaho']\n\n# full states\nfull = ['california','virginia','new jersey','michigan','massachusetts','illinois',\n        'florida','indiana','west virginia','north carolina','pennsylvania',\n        'mississippi','texas','colorado','new york','georgia','oregon','iowa',\n        'delaware','wisconsin','maryland','oklahoma','missouri','utah','minnesota',\n        'arizona','louisiana','south carolina','kentucky','washington','arkansas',\n        'alabama','wyoming','connecticut','kansas','new mexico','tennessee','ohio',\n        'montana','nevada','rhode island','maine','vermont','idaho']\n\n# dictionary to switch between abbreviation to full state names\n# table article used non-standard abbreviations, so needed a custom dictionary\nabbreviated_states_custom = {abbr_st: full_st for abbr_st, full_st in zip(abbreviated, full)}\n\n\n\n\nCode\n# apply the dictionary\ncolleges_df['state'] = colleges_df['state'].apply(lambda state: abbreviated_states_custom[state])\n\n\n\n\nCode\n# after\ncolleges_df.head(10)\n\n\n\n\n\n\n\n\n\ncity\nstate\ncolleges\n\n\n\n\n0\nstanford\ncalifornia\nstanford university\n\n\n1\nwilliamsburg\nvirginia\nwilliam & mary\n\n\n2\npasadena\ncalifornia\ncalifornia institute of technology\n\n\n3\nprinceton\nnew jersey\nprinceton university\n\n\n4\ncharlottesville\nvirginia\nuniversity of virginia\n\n\n5\nann arbor\nmichigan\nuniversity of michigan-ann arbor\n\n\n6\ncambridge\nmassachusetts\nharvard university, massachusetts institute of...\n\n\n7\nberkeley\ncalifornia\nuniversity of california-berkeley\n\n\n8\nchampaign\nillinois\nuniversity of illinois urbana-champaign\n\n\n9\ngainesville\nflorida\nuniversity of florida, santa fe college"
  },
  {
    "objectID": "exploratory/top-colleges-exploration.html#visualizing-the-data",
    "href": "exploratory/top-colleges-exploration.html#visualizing-the-data",
    "title": "Top Colleges Exploration",
    "section": "Visualizing the Data",
    "text": "Visualizing the Data\nFor future exploration, use data/top-colleges.csv pulled and cleaned by scripts/top-colleges-extractor.py."
  },
  {
    "objectID": "introduction.html",
    "href": "introduction.html",
    "title": "Introduction",
    "section": "",
    "text": "What Is The Project?\n\nThe Brewery Project takes an in depth look into the world of Breweries and Beer in the US. This team will explore features of the brewing market from beer prices to brewery locations to common demographics of successful brewery towns. We will focus on key areas of interest for a range of beer fans from the seasoned brew bros to new, potential brewers. This study will take on interesting perspectives of the beer market in hopes to identify key trends in beer production, consumption and sales.\nThe Brewery Project will start with a look into beer sales and pricing across the country. This will include comparison of all your basic and well known beers across the States and a closer look at local grocery store and pub prices. With a basic understanding of the market, we will begin to focus in our report to review some of the factors that may promote breweries. Sometimes beer is associated with outdoor mountain activities, so we will examine this and other conditions (such as college towns and tech hubs) that may favor the brewery scene. These styles of living may also be intertwined with population demographics, so we’ll expand our exploration into additional factors such as income and age. The Brewery Project will conclude with actionable results that can guide future decisions on where to go if you want to buy beer, make beer, or drink beer.\n\n\n\n\n\n\n\nWhy Does The Project Matter?\n\n\n\n\n\n\nThe Brewery Project gives insight into where brewery hotspots are and how they are associated with communities and activities. We - as beer lovers ourselves - are always looking for new breweries with good beers. We find it interesting how brewing communities often cluster near mountain activity regions and would like to take a closer look at beer consumption across other parts of the country. For many, breweries often foster a relaxed and welcoming community space to unwind and relax after a long day. We hope to identify key areas that have taken strongly to the Brewery life as this may point us in the direction of identifying new towns that could support similar businesses.\nThe composition of breweries (micro to large commercial) and the kinds of populations/areas that support local breweries are important to study in order to maintain a diverse beer market. It is the underlying work of small companies that maintains the craft of brewing and we should do our best to support it. This information can ultimately inform business decisions in the brewing industry if you are a new or experienced brewery looking for your next potential location. A little extra knowledge about your target customers and their lifestyles, might just help point you to a successful brewery hotspot. Of course, if you just want to visit beer towns, this work will help you too.\n\n\n\n\nWho Does The Project Affect?\n\n\nOur project is relevant to both beer drinkers and beer brewers, primarily in the most populated metropolitan areas of the US. Of course as law abiding citizens, this will only apply to those who are 21+ years of age and permitted to consume alcohol.\nFor the bro-est of beer bros, certain localities have what’s known as a “beer passport”, which is a passport-like book that includes various breweries from the area. This encourages the passport holder to visit the included breweries where they will get one free beer and a stamp in their passport. With The Brewery Project, we want to take this a step further, and create a recommendation engine for beer lovers that personalizes brewery suggestions based on the user’s demographics and preferences. The recommendations will be based on features such as personal characteristics, whether the user is on a budget, what activities they like to do, and their location in the US.\nSimilarly, we intend to create a recommendation engine for beer brewers, to suggest the best place to open a new brewery. We know that it can be tricky for any new business to enter the market, and the beer/brewery market is certainly saturated in some places. We believe that this project could assist prospective producers in determining the best location for a new brewery based on market gaps, local demographics, and local attractions correlating with beer consumption.\nUltimately, if you are 21+ and want to drink beer, or brew it for others, this project is for you!\n\n\n\n\n\n\n\n\nWhat Has Been Done So Far?\n\n\n\n\n\n\nThere are several websites, databases, and applications associated with individual beer brands, breweries, and venues.\nWhat could be considered as “the world’s most popular beer-rating platform” [1], UNTAPPD [2] allows the community to rate beers and breweries. They maintain a robust database which helps maintain and showcase the ratings and sustain an almost social media like presences for individuals, brewers, and venues. Previously, they had API access for private app developers to use, but at this point in time has been discontinued.\nA completely open-source database project focused around brewery-related data known as the Open Brewery DB [3]. They maintain API access, a GitHub page with international brewery data available for download, and even a Discord for this community to discuss their projects surrounding this open-source data. They have a project page with featured projects using their database. Most apps and projects at least influenced by this project have a social media or geographical focus.\nThe original data source and scrapers for the Open Brewery DB project was the Brewers Association [4]. Their stated purpose is to “promote and protect American craft brewers, their beers, and the community of brewing enthusiasts.” Their website features detailed exploratory analysis into the growth and other aspects of the brewing industry.\nIn summary, many of the current applications have been initial data compilations of craft beer and breweries, and apps focused on a social media or geographical recommendation focus.\nHowever, an industry which does have plenty of research and is potentially transferable is real estate. The article “5 Ways to Apply Data Science to Real Estate” by Nelson Lau [5] provides a breakdown of how different features in data are applied to make price predictions, perform cluster analysis, and incorporate the use of GIS.\n\n\n\n\nWhat Can Still Be Done?\n\n\nThrough our research on the topic, we have explored various databases and projects relating to beers and breweries. What we have found is that the existing databases and projects primarily focus on exploratory data analysis. We located digital brewery heatmaps, databases detailing various characteristics of breweries and beers, and rating systems for breweries and beers. However, we have yet to find any existing project utilizing a predictive model in the beer and brewery space. As mentioned previously, we intend to build a predictive model for beer lovers to find new breweries, and for prospective beer producers to find spaces to enter the market.\nTo build this model, we intend to utilize the various available datasets related to brewery locations and information, beer pricing, local attractions and nature, local schools and tech hubs, and population/census information. We will aggregate the data and implement data mining techniques to build a model that takes into account an individual’s goals and personal characteristics to suggest the best brewery to visit, or the best place to enter the market as a beer producer. For example, we want to be able to recommend the best brewery for an out of state, 30 year old traveler, who is visiting Colorado to hike a specific 14er. We also want to be able to inform a prospective beer brewer in Texas on the best place to open up a microbrewery.\n\n\n\n\n\n\n\n\n\nResearch Questions\n\nWhat is the frequency of breweries by US state?\nWhat is the frequency of breweries near Outdoor Recreational Areas (hiking hotspots, ski resorts, state or national parks, etc.)?\nWhat is the frequency of breweries near Beach Towns?\nWhat is the frequency of breweries near College Towns?\nWhat is the frequency of breweries near Tech hubs?\nWhat is the frequency of breweries near Major Cities?\nHow can we define a brewery hotspot?\nWhat are the top brewery hotspots?\nWhat are the average population statistics (income, age, race, etc.) near brewery hotspots?\nWhat destinations can be recommended for new brewers looking to start a business?\nWhat destinations can be recommended for beer drinkers?\n\n\n\n\n\n\nReferences\n\n1. Bernot K (2021) Tyranny of the tickers - how UNTAPPD ratings became craft beer’s most Fickle prize. Good Beer Hunting\n\n\n2. UNTAPPD (2024) UNTAPPD\n\n\n3. DB OB (2024) Open brewery DB\n\n\n4. Association B (2024) Brewers association\n\n\n5. Lau N (2020) 5 Ways to Apply Data Science to Real Estate. Medium"
  }
]