# -*- coding: utf-8 -*-
"""The Brewery Project Web Scraping (National Parks).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CQal7wCpJqjpoAsie7vzPFFtIKd3vfMu

**Web Scraping**
"""

import pandas as pd
import requests
from bs4 import BeautifulSoup
from IPython.display import FileLink
from IPython.display import display
import re
from geopy.geocoders import Nominatim
import numpy as np

# Build scraper

url = "https://www.nationalparktrips.com/parks/us-national-parks-by-state-list/"

response = requests.get(url)

soup = BeautifulSoup(response.text, 'html.parser')

national_parks_data = []

state_headings = soup.find_all("h2")

for index, heading in enumerate(state_headings):
  state = heading.text.strip()
  if state != "12 Trip Planners":
    next_sibling = heading.find_next_sibling()
    while next_sibling and next_sibling.name != "h2":
      park_info = next_sibling.text.split(", ")
      if len(park_info) == 1:
        park_info = next_sibling.text.split(" - ")
      national_park = park_info[0].strip()
      national_parks_data.append({"National Park": national_park, "State": state})
      next_sibling = next_sibling.find_next_sibling()

national_parks_df = pd.DataFrame(national_parks_data)
#display(national_parks_df)

# Data cleaning/preprocessing
# Primarily used for adding latitude and longitude coordinates necessary for future modeling

def find_lat_long(location):
  geolocator = Nominatim(user_agent="park_locator")
  try:
    location = geolocator.geocode(location, timeout=60)
    if location:
      return location.latitude, location.longitude
  except Exception as e:
    print(f"Unable to find latitude and longitude for {location}")
  return None, None

national_parks_df["Latitude"] = np.nan
national_parks_df["Longitude"] = np.nan

for index, row in national_parks_df.iterrows():
  location = f"{row['National Park']}, {row['State']}"
  latitude, longitude = find_lat_long(location)
  national_parks_df.at[index, "Latitude"] = latitude
  national_parks_df.at[index, "Longitude"] = longitude

#display(national_parks_df)

# Convert and download CSV file

national_parks_df.to_csv('../data/national_parks.csv', index=False)

# FileLink('../data/national_parks.csv') # commented out by CK for script running